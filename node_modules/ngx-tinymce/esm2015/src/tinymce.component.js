import { __decorate } from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy, TemplateRef, ViewEncapsulation, Output, EventEmitter, Inject, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { InputBoolean, InputNumber } from '@ng-util/util';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "./tinymce.options";
import * as i2 from "@ng-util/lazy";
import * as i3 from "@angular/common";
const isSSR = !(typeof document === 'object' && !!document);
export class TinymceComponent {
    constructor(defConfig, lazySrv, ngZone, doc, cd) {
        this.defConfig = defConfig;
        this.lazySrv = lazySrv;
        this.ngZone = ngZone;
        this.doc = doc;
        this.cd = cd;
        this.value = '';
        this.load = true;
        this.id = `_tinymce-${Math.random().toString(36).substring(2)}`;
        this.placeholder = '';
        this.inline = false;
        this._disabled = false;
        this._loading = null;
        this._loadingTpl = null;
        /** 延迟初始化 */
        this.delay = 0;
        this.ready = new EventEmitter();
    }
    set disabled(value) {
        this._disabled = value;
        this.setDisabled();
    }
    set loading(value) {
        if (value instanceof TemplateRef) {
            this._loading = null;
            this._loadingTpl = value;
        }
        else {
            this._loading = value;
        }
    }
    get instance() {
        return this._instance;
    }
    _getWin() {
        return this.doc.defaultView || window;
    }
    initDelay() {
        if (isSSR) {
            return;
        }
        setTimeout(() => this.init(), Math.min(0, this.delay));
    }
    init() {
        const win = this._getWin();
        if (!win.tinymce) {
            throw new Error('tinymce js文件加载失败');
        }
        const { defConfig, config, id, inline } = this;
        if (this._instance) {
            return;
        }
        if (defConfig.baseURL) {
            let url = '' + defConfig.baseURL;
            if (url.endsWith('/')) {
                url = url.substr(0, url.length - 1);
            }
            win.tinymce.baseURL = url;
        }
        const userOptions = Object.assign(Object.assign({}, defConfig.config), config);
        const options = Object.assign(Object.assign(Object.assign({ selector: `#` + id, inline }, defConfig.config), config), { setup: (editor) => {
                this._instance = editor;
                if (this.onChange) {
                    editor.on('change keyup', () => {
                        this.value = editor.getContent();
                        this.ngZone.run(() => this.onChange(this.value));
                    });
                }
                if (typeof userOptions.setup === 'function') {
                    userOptions.setup(editor);
                }
            }, init_instance_callback: (editor) => {
                if (editor && this.value) {
                    editor.setContent(this.value);
                }
                this.setDisabled();
                if (typeof userOptions.init_instance_callback === 'function') {
                    userOptions.init_instance_callback(editor);
                }
                this.ready.emit(this._instance);
            } });
        if (userOptions.auto_focus) {
            options.auto_focus = id;
        }
        this.ngZone.runOutsideAngular(() => win.tinymce.init(options));
        this.load = false;
        this.cd.detectChanges();
    }
    destroy() {
        if (!this._instance) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this._instance.off();
            this._instance.remove('#' + this.id);
        });
        this._instance = null;
    }
    setDisabled() {
        if (!this._instance) {
            return;
        }
        this.ngZone.runOutsideAngular(() => this._instance.setMode(this._disabled ? 'readonly' : 'design'));
    }
    ngAfterViewInit() {
        if (isSSR) {
            return;
        }
        // 已经存在对象无须进入懒加载模式
        if (this._getWin().tinymce) {
            this.initDelay();
            return;
        }
        const { defConfig } = this;
        const baseURL = defConfig && defConfig.baseURL;
        const fileName = defConfig && defConfig.fileName;
        const url = (baseURL || './assets/tinymce/') + (fileName || 'tinymce.min.js');
        this.lazySrv.monitor(url).subscribe(() => this.initDelay());
        this.lazySrv.load(url);
    }
    ngOnChanges(changes) {
        if (this._instance && changes.config) {
            this.destroy();
            this.initDelay();
        }
    }
    ngOnDestroy() {
        this.destroy();
    }
    writeValue(value) {
        // value should be NOT NULL
        this.value = value || '';
        if (this._instance) {
            this.ngZone.runOutsideAngular(() => this._instance.setContent(this.value));
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.setDisabled();
    }
}
TinymceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: TinymceComponent, deps: [{ token: i1.TinymceOptions }, { token: i2.NuLazyService }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
TinymceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.2", type: TinymceComponent, selector: "tinymce", inputs: { config: "config", placeholder: "placeholder", inline: "inline", disabled: "disabled", loading: "loading", delay: "delay" }, outputs: { ready: "ready" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => TinymceComponent),
            multi: true,
        },
    ], exportAs: ["tinymce"], usesOnChanges: true, ngImport: i0, template: `
    <textarea *ngIf="!inline" [attr.id]="id" [attr.placeholder]="placeholder" class="tinymce-selector"></textarea>
    <div *ngIf="inline" [attr.id]="id"><ng-content></ng-content></div>
    <div class="loading" *ngIf="load">
      <ng-container *ngIf="_loading; else _loadingTpl">{{ _loading }}</ng-container>
    </div>
  `, isInline: true, styles: ["\n      tinymce .tinymce-selector {\n        display: none;\n      }\n    "], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
__decorate([
    InputBoolean()
], TinymceComponent.prototype, "inline", void 0);
__decorate([
    InputBoolean()
], TinymceComponent.prototype, "disabled", null);
__decorate([
    InputNumber()
], TinymceComponent.prototype, "delay", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: TinymceComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tinymce',
                    exportAs: 'tinymce',
                    template: `
    <textarea *ngIf="!inline" [attr.id]="id" [attr.placeholder]="placeholder" class="tinymce-selector"></textarea>
    <div *ngIf="inline" [attr.id]="id"><ng-content></ng-content></div>
    <div class="loading" *ngIf="load">
      <ng-container *ngIf="_loading; else _loadingTpl">{{ _loading }}</ng-container>
    </div>
  `,
                    styles: [
                        `
      tinymce .tinymce-selector {
        display: none;
      }
    `,
                    ],
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TinymceComponent),
                            multi: true,
                        },
                    ],
                    preserveWhitespaces: false,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.TinymceOptions }, { type: i2.NuLazyService }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { config: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], inline: [{
                type: Input
            }], disabled: [{
                type: Input
            }], loading: [{
                type: Input
            }], delay: [{
                type: Input
            }], ready: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,