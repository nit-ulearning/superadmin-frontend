import { Directive } from "@angular/core";
import * as i0 from "@angular/core";
export class NgxGaugeAppend {
}
NgxGaugeAppend.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: NgxGaugeAppend, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NgxGaugeAppend.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.1.4", type: NgxGaugeAppend, selector: "ngx-gauge-append", exportAs: ["ngxGaugeAppend"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: NgxGaugeAppend, decorators: [{
            type: Directive,
            args: [{
                    selector: "ngx-gauge-append",
                    exportAs: "ngxGaugeAppend"
                }]
        }] });
export class NgxGaugePrepend {
}
NgxGaugePrepend.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: NgxGaugePrepend, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NgxGaugePrepend.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.1.4", type: NgxGaugePrepend, selector: "ngx-gauge-prepend", exportAs: ["ngxGaugePrepend"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: NgxGaugePrepend, decorators: [{
            type: Directive,
            args: [{
                    selector: "ngx-gauge-prepend",
                    exportAs: "ngxGaugePrepend"
                }]
        }] });
export class NgxGaugeValue {
}
NgxGaugeValue.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: NgxGaugeValue, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NgxGaugeValue.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.1.4", type: NgxGaugeValue, selector: "ngx-gauge-value", exportAs: ["ngxGaugeValue"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: NgxGaugeValue, decorators: [{
            type: Directive,
            args: [{
                    selector: "ngx-gauge-value",
                    exportAs: "ngxGaugeValue"
                }]
        }] });
export class NgxGaugeLabel {
}
NgxGaugeLabel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: NgxGaugeLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NgxGaugeLabel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.1.4", type: NgxGaugeLabel, selector: "ngx-gauge-label", exportAs: ["ngxGaugeLabel"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.4", ngImport: i0, type: NgxGaugeLabel, decorators: [{
            type: Directive,
            args: [{
                    selector: "ngx-gauge-label",
                    exportAs: "ngxGaugeLabel"
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UtZGlyZWN0aXZlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1nYXVnZS9zcmMvZ2F1Z2UvZ2F1Z2UtZGlyZWN0aXZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU0xQyxNQUFNLE9BQU8sY0FBYzs7MkdBQWQsY0FBYzsrRkFBZCxjQUFjOzJGQUFkLGNBQWM7a0JBSjFCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsUUFBUSxFQUFFLGdCQUFnQjtpQkFDM0I7O0FBT0QsTUFBTSxPQUFPLGVBQWU7OzRHQUFmLGVBQWU7Z0dBQWYsZUFBZTsyRkFBZixlQUFlO2tCQUozQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFFBQVEsRUFBRSxpQkFBaUI7aUJBQzVCOztBQU9ELE1BQU0sT0FBTyxhQUFhOzswR0FBYixhQUFhOzhGQUFiLGFBQWE7MkZBQWIsYUFBYTtrQkFKekIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixRQUFRLEVBQUUsZUFBZTtpQkFDMUI7O0FBT0QsTUFBTSxPQUFPLGFBQWE7OzBHQUFiLGFBQWE7OEZBQWIsYUFBYTsyRkFBYixhQUFhO2tCQUp6QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFFBQVEsRUFBRSxlQUFlO2lCQUMxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogXCJuZ3gtZ2F1Z2UtYXBwZW5kXCIsXHJcbiAgZXhwb3J0QXM6IFwibmd4R2F1Z2VBcHBlbmRcIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4R2F1Z2VBcHBlbmQge31cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiBcIm5neC1nYXVnZS1wcmVwZW5kXCIsXHJcbiAgZXhwb3J0QXM6IFwibmd4R2F1Z2VQcmVwZW5kXCJcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neEdhdWdlUHJlcGVuZCB7fVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6IFwibmd4LWdhdWdlLXZhbHVlXCIsXHJcbiAgZXhwb3J0QXM6IFwibmd4R2F1Z2VWYWx1ZVwiXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hHYXVnZVZhbHVlIHt9XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogXCJuZ3gtZ2F1Z2UtbGFiZWxcIixcclxuICBleHBvcnRBczogXCJuZ3hHYXVnZUxhYmVsXCJcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neEdhdWdlTGFiZWwge31cclxuIl19