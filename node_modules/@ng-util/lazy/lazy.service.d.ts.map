{"version":3,"file":"lazy.service.d.ts","sources":["lazy.service.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nexport declare type NuLazyResourcesType = 'script' | 'style';\nexport interface NuLazyResources {\n    path: string;\n    type: NuLazyResourcesType;\n    /**\n     * 回调名称\n     */\n    callback?: string;\n}\nexport interface NuLazyResult {\n    path: string;\n    status: 'ok' | 'error' | 'loading';\n    type?: NuLazyResourcesType;\n    error?: {};\n}\nexport declare class NuLazyService {\n    private doc;\n    private list;\n    private cached;\n    private _notify;\n    constructor(doc: any);\n    private fixPaths;\n    /**\n     * Monitor for the finished of `paths`\n     *\n     * - It's recommended to pass the value in accordance with the `load()` method\n     */\n    monitor(paths?: string | Array<string | NuLazyResources>): Observable<NuLazyResult[]>;\n    clear(): void;\n    /**\n     * Load the specified resources, includes `.js`, `.css`\n     *\n     * - The returned Promise does not mean that it was successfully loaded\n     * - You can monitor load is success via `monitor()`\n     */\n    load(paths: string | Array<string | NuLazyResources>): Promise<NuLazyResult[]>;\n    loadScript(path: string, options?: {\n        innerContent?: string;\n        callback?: string;\n    }): Promise<NuLazyResult>;\n    loadStyle(path: string, options?: {\n        rel?: string;\n        innerContent?: string;\n    }): Promise<NuLazyResult>;\n}\n"]}