/**
 * @fileoverview added by tsickle
 * Generated from: lazy.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __awaiter } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, pipe } from 'rxjs';
import { filter, share } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * @record
 */
export function NuLazyResources() { }
if (false) {
    /** @type {?} */
    NuLazyResources.prototype.path;
    /** @type {?} */
    NuLazyResources.prototype.type;
    /**
     * 回调名称
     * @type {?|undefined}
     */
    NuLazyResources.prototype.callback;
}
/**
 * @record
 */
export function NuLazyResult() { }
if (false) {
    /** @type {?} */
    NuLazyResult.prototype.path;
    /** @type {?} */
    NuLazyResult.prototype.status;
    /** @type {?|undefined} */
    NuLazyResult.prototype.type;
    /** @type {?|undefined} */
    NuLazyResult.prototype.error;
}
export class NuLazyService {
    /**
     * @param {?} doc
     */
    constructor(doc) {
        this.doc = doc;
        this.list = {};
        this.cached = {};
        this._notify = new BehaviorSubject([]);
    }
    /**
     * @private
     * @param {?=} paths
     * @return {?}
     */
    fixPaths(paths) {
        paths = paths || [];
        if (!Array.isArray(paths)) {
            paths = [paths];
        }
        return paths.map((/**
         * @param {?} p
         * @return {?}
         */
        (p) => {
            /** @type {?} */
            const res = (/** @type {?} */ ((typeof p === 'string' ? { path: p } : p)));
            if (!res.type) {
                res.type = res.path.endsWith('.js') || res.callback ? 'script' : 'style';
            }
            return res;
        }));
    }
    /**
     * Monitor for the finished of `paths`
     *
     * - It's recommended to pass the value in accordance with the `load()` method
     * @param {?=} paths
     * @return {?}
     */
    monitor(paths) {
        /** @type {?} */
        const libs = this.fixPaths(paths);
        /** @type {?} */
        const pipes = [share(), filter((/**
             * @param {?} ls
             * @return {?}
             */
            (ls) => ls.length !== 0))];
        if (libs.length > 0) {
            pipes.push(filter((/**
             * @param {?} ls
             * @return {?}
             */
            (ls) => ls.length === libs.length && ls.every((/**
             * @param {?} v
             * @return {?}
             */
            v => v.status === 'ok' && libs.find((/**
             * @param {?} lw
             * @return {?}
             */
            lw => lw.path === v.path)))))));
        }
        return this._notify.asObservable().pipe(pipe.apply(this, pipes));
    }
    /**
     * @return {?}
     */
    clear() {
        this.list = {};
        this.cached = {};
    }
    /**
     * Load the specified resources, includes `.js`, `.css`
     *
     * - The returned Promise does not mean that it was successfully loaded
     * - You can monitor load is success via `monitor()`
     * @param {?} paths
     * @return {?}
     */
    load(paths) {
        return __awaiter(this, void 0, void 0, function* () {
            paths = this.fixPaths(paths);
            return Promise.all(((/** @type {?} */ (paths))).map((/**
             * @param {?} p
             * @return {?}
             */
            p => p.type === 'script' ? this.loadScript(p.path, { callback: p.callback }) : this.loadStyle(p.path)))).then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                this._notify.next(res);
                return Promise.resolve(res);
            }));
        });
    }
    /**
     * @param {?} path
     * @param {?=} options
     * @return {?}
     */
    loadScript(path, options) {
        const { innerContent } = Object.assign({}, options);
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            if (this.list[path] === true) {
                resolve(Object.assign(Object.assign({}, this.cached[path]), { status: 'loading' }));
                return;
            }
            this.list[path] = true;
            /** @type {?} */
            const onSuccess = (/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                if (item.status === 'ok' && (options === null || options === void 0 ? void 0 : options.callback)) {
                    ((/** @type {?} */ (window)))[options === null || options === void 0 ? void 0 : options.callback] = (/**
                     * @return {?}
                     */
                    () => {
                        onSuccessTruth(item);
                    });
                }
                else {
                    onSuccessTruth(item);
                }
            });
            /** @type {?} */
            const onSuccessTruth = (/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                item.type = 'script';
                this.cached[path] = item;
                resolve(item);
                this._notify.next([item]);
            });
            /** @type {?} */
            const node = (/** @type {?} */ (this.doc.createElement('script')));
            node.type = 'text/javascript';
            node.src = path;
            node.charset = 'utf-8';
            if (innerContent) {
                node.innerHTML = innerContent;
            }
            if (node.readyState) {
                // IE
                node.onreadystatechange = (/**
                 * @return {?}
                 */
                () => {
                    if (node.readyState === 'loaded' || node.readyState === 'complete') {
                        node.onreadystatechange = null;
                        onSuccess({
                            path,
                            status: 'ok',
                        });
                    }
                });
            }
            else {
                node.onload = (/**
                 * @return {?}
                 */
                () => onSuccess({
                    path,
                    status: 'ok',
                }));
            }
            node.onerror = (/**
             * @param {?} error
             * @return {?}
             */
            (error) => onSuccess({
                path,
                status: 'error',
                error,
            }));
            this.doc.getElementsByTagName('head')[0].appendChild(node);
        }));
    }
    /**
     * @param {?} path
     * @param {?=} options
     * @return {?}
     */
    loadStyle(path, options) {
        const { rel, innerContent } = Object.assign({ rel: 'stylesheet' }, options);
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            if (this.list[path] === true) {
                resolve(this.cached[path]);
                return;
            }
            this.list[path] = true;
            /** @type {?} */
            const node = (/** @type {?} */ (this.doc.createElement('link')));
            node.rel = rel;
            node.type = 'text/css';
            node.href = path;
            if (innerContent) {
                node.innerHTML = innerContent;
            }
            this.doc.getElementsByTagName('head')[0].appendChild(node);
            /** @type {?} */
            const item = {
                path,
                status: 'ok',
                type: 'style',
            };
            this.cached[path] = item;
            resolve(item);
        }));
    }
}
NuLazyService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
NuLazyService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/** @nocollapse */ NuLazyService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NuLazyService_Factory() { return new NuLazyService(i0.ɵɵinject(i1.DOCUMENT)); }, token: NuLazyService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NuLazyService.prototype.list;
    /**
     * @type {?}
     * @private
     */
    NuLazyService.prototype.cached;
    /**
     * @type {?}
     * @private
     */
    NuLazyService.prototype._notify;
    /**
     * @type {?}
     * @private
     */
    NuLazyService.prototype.doc;
}
//# sourceMappingURL=data:application/json;base64,